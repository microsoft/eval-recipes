[project]
name = "eval_recipes"
version = "0.0.5"
description = "Eval Recipes"
authors = [{ name = "Semantic Workbench Team" }]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "azure-core[aio]>=1.35,<2.0",
    "azure-identity>=1.24,<2.0",
    "loguru>=0.7,<1.0",
    "nltk>=3.9,<4.0",
    "openai[aiohttp]>=1.106,<2.0",
    "pydantic>=2.11,<3.0",
    "python-dotenv>=1.1,<2.0",
    "python-liquid>=2.1,<3.0",
    "PyYAML>=6.0,<7.0",
    "rich>=14.1,<15.0",
    "tiktoken>=0.11,<1.0",
]

[dependency-groups]
dev = [
    "ipykernel>6.30,<7.0",
    "marimo[recommended]>=0.14,<1.0",
    "nbclient>0.10,<1.0",
    "pyright>=1.1.401",
    "pytest",
    "pytest-asyncio",
]
animations = [
    "manim>=0.19,<1.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 120
exclude = [
    "demos",
]

[tool.ruff.lint]
select = [
    "F", # pyflakes
    "E", # pycodestyle
    "I", # isort
    "N", # pep8-naming
    "UP", # pyupgrade
    "RUF", # ruff
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "ISC", # flake8-implicit-str-concat
    "PIE", # flake8-pie
    "PT", # flake-pytest-style
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
]
ignore = ["E501"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"main.py" = ["B008"] # Ignores the issue of using Depends in FastAPI route params

[tool.ruff.lint.isort]
force-sort-within-sections = true
split-on-trailing-comma = false
known-first-party = ["eval_recipes"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.pytest.ini_options]
addopts = [
    "--strict-config",
    "--strict-markers",
]
xfail_strict = true
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"
filterwarnings = [
    # When running tests, treat warnings as errors (e.g. -Werror).
    # See: https://docs.pytest.org/en/latest/reference/reference.html#confval-filterwarnings
    "error",
    # Add additional warning suppressions as needed here. For example, if a third-party library
    # is throwing a deprecation warning that needs to be fixed upstream:
    # "ignore::DeprecationWarning:typer",
    "ignore::DeprecationWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning",
    "ignore::pytest_asyncio.plugin.PytestDeprecationWarning",
]

[tool.marimo.formatting]
line_length = 120

[tool.marimo.runtime]
auto_instantiate=false
on_cell_change="lazy"

[tool.pyright]
ignore = ["demos"]
typeCheckingMode = "standard"
